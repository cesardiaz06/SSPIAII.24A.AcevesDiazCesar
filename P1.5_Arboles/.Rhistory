setwd("~/GitHub/SSPIAII.24A.AcevesDiazCesar/P1.5_Arboles")
# Aceves Díaz César Alejandro.
# 29 de febrero 2024.
# P1.5 - Árboles de decisión.
source("Lib.Preprocess.R") #Carga de librerías.
set.seed(2002) #Establecer la semilla.
options(scipen = 999) #Mostrar decimales en números.
df.Social <- read.csv(file = "Social_Network_Ads.csv",
header = T,
stringsAsFactors = T)
View(df.Social)
summary(df.Social$Gender)
summary(df.Social$Age)
summary(df.Social$EstimatedSalary)
summary(df.Social$Purchased)
df.Social$User.ID <- NULL
summary(df.Social)
#oConvertir a numeros la columna de género para trabajar con los datos.
#2 <- Male, 1 <- Female.
df.Social$Gender <- as.numeric(df.Social$Gender)
View(df.Social)
corrplot(cor.Social,
addCoef.col = "black",
insig = "label_sig",
method = "pie",
type = "full",
diag = F,
col = viridis(n = 5, direction = 1),
title = "Correlación Social Network Ads")
#Selección de variables.
cor.Social <- cor(df.Social)
corrplot(cor.Social,
addCoef.col = "black",
insig = "label_sig",
method = "pie",
type = "full",
diag = F,
col = viridis(n = 5, direction = 1),
title = "Correlación Social Network Ads")
df.Social$Gender <- NULL
#División entrenamiento y prueba.
Split <- sample.split(df.Social$Purchased, SplitRatio = 0.8)
df.Social.Train <- subset(df.Social, Split == T)
df.Social.Test <- subset(df.Social, Split == F)
mdl.rpart <- rpart(formula = Purchased ~ Age, data = df.Social.Train, minsplit = 5)
mdl.rpart.model <- rpart.plot(mdl.rpart)
mdl.rpart <- rpart(formula = Purchased ~ Age, data = df.Social.Train, minsplit = 20)
mdl.rpart.model <- rpart.plot(mdl.rpart)
mdl.rpart <- rpart(formula = Purchased ~ Age, data = df.Social.Train, minsplit = 20)
mdl.rpart.model <- rpart.plot(mdl.rpart)
mdl.rpart <- rpart(formula = Purchased ~ Age, data = df.Social.Train, minsplit = 2000)
mdl.rpart <- rpart(formula = Purchased ~ Age, data = df.Social.Train, minsplit = 200)
mdl.rpart.model <- rpart.plot(mdl.rpart)
mdl.rpart <- rpart(formula = Purchased ~ Age, data = df.Social.Train, minsplit = 30)
mdl.rpart.model <- rpart.plot(mdl.rpart)
#Modelo 2 con randomForest.
mdl.randomForest <- randomForest(formula = Purchased ~ Age, data = df.Social.Train)
View(mdl.randomForest)
#Modelo 2 con randomForest.
mdl.randomForest <- randomForest(formula = Purchased ~ Age, data = df.Social.Train)
n
#Convertimos la variable objetivo a factor para un mejor manejo.
df.Social$Purchased <- as.factor(df.Social$Purchased)
View(df.Social)
# Aceves Díaz César Alejandro.
# 29 de febrero 2024.
# P1.5 - Árboles de decisión.
source("Lib.Preprocess.R") #Carga de librerías.
set.seed(2002) #Establecer la semilla.
options(scipen = 999) #Mostrar decimales en números.
df.Social <- read.csv(file = "Social_Network_Ads.csv",
header = T,
stringsAsFactors = T)
#Convertimos la variable objetivo a factor para un mejor manejo.
df.Social$Purchased <- as.factor(df.Social$Purchased)
#Eliminamos la columna de ID de usuario ya que no es relevante para el modelo.
df.Social$User.ID <- NULL
summary(df.Social)
#oConvertir a numeros la columna de género para trabajar con los datos.
#2 <- Male, 1 <- Female.
df.Social$Gender <- as.numeric(df.Social$Gender)
#Selección de variables.
cor.Social <- cor(df.Social)
df.Social$Gender <- NULL
# Aceves Díaz César Alejandro.
# 29 de febrero 2024.
# P1.5 - Árboles de decisión.
source("Lib.Preprocess.R") #Carga de librerías.
set.seed(2002) #Establecer la semilla.
options(scipen = 999) #Mostrar decimales en números.
df.Social <- read.csv(file = "Social_Network_Ads.csv",
header = T,
stringsAsFactors = T)
#Convertimos la variable objetivo a factor para un mejor manejo.
df.Social$Purchased <- as.factor(df.Social$Purchased)
#Eliminamos la columna de ID de usuario ya que no es relevante para el modelo.
df.Social$User.ID <- NULL
df.Social$Gender <- NULL
summary(df.Social)
#oConvertir a numeros la columna de género para trabajar con los datos.
#2 <- Male, 1 <- Female.
df.Social$Gender <- as.numeric(df.Social$Gender)
source("Lib.Preprocess.R") #Carga de librerías.
set.seed(2002) #Establecer la semilla.
options(scipen = 999) #Mostrar decimales en números.
df.Social <- read.csv(file = "Social_Network_Ads.csv",
header = T,
stringsAsFactors = T)
#Eliminamos la columna de ID de usuario ya que no es relevante para el modelo.
df.Social$User.ID <- NULL
df.Social$Gender <- NULL
summary(df.Social)
#Convertimos la variable objetivo a factor para un mejor manejo.
df.Social$Purchased <- as.factor(df.Social$Purchased)
Split <- sample.split(df.Social$Purchased, SplitRatio = 0.8)
df.Social.Train <- subset(df.Social, Split == T)
df.Social.Test <- subset(df.Social, Split == F)
mdl.rpart <- rpart(formula = Purchased ~ Age, data = df.Social.Train, minsplit = 30)
mdl.rpart.model <- rpart.plot(mdl.rpart)
#Modelo 2 con randomForest.
mdl.randomForest <- randomForest(formula = Purchased ~ Age, data = df.Social.Train)
mdl.randomForest
#Modelo 2 con randomForest.
mdl.randomForest <- randomForest(formula = Purchased ~ Age,
data = df.Social.Train,
ntree = 40,
keep.forest = TRUE)
mdl.randomForest
mdl.rF.prueba <- randomForest(x = df.Social.Train$Age,
y = df.Social.Train$Purchased,
ntree = 40,
keep.forest = TRUE)
View(df.Social)
mdl.rF.prueba <- randomForest(x = df.Social.Train$Age[1],
y = df.Social.Train$Purchased[3],
ntree = 40,
keep.forest = TRUE)
#Modelo 2 con randomForest.
mdl.randomForest <- randomForest(formula = Purchased ~ Age,
data = df.Social.Train,
ntree = 40,
keep.forest = TRUE)
mdl.randomForest
predict.Social <- predict(mdl.randomForest, type = "response",
newdata = df.Social.Train)
mdl.randomForest
#Modelo 2 con randomForest.
mdl.randomForest <- randomForest(formula = Purchased ~ Age,
data = df.Social.Train,
ntree = 100,
keep.forest = TRUE)
predict.Social <- predict(mdl.randomForest, type = "response",
newdata = df.Social.Train)
mdl.randomForest
#Modelo 2 con randomForest.
mdl.randomForest <- randomForest(formula = Purchased ~ Age,
data = df.Social.Train,
ntree = 500,
keep.forest = TRUE)
predict.Social <- predict(mdl.randomForest, type = "response",
newdata = df.Social.Train)
mdl.randomForest
#Modelo 2 con randomForest.
mdl.randomForest <- randomForest(formula = Purchased ~ Age,
data = df.Social.Train,
ntree = 500,
keep.forest = TRUE,
minsplit = 30)
predict.Social <- predict(mdl.randomForest, type = "response",
newdata = df.Social.Train)
mdl.randomForest
confusionMatrix(mdl.randomForest)
matriz <- table(df.Social.Train$Purchased, predict.Social)
matriz
confusionMatrix(matriz)$byClass
for1 <- confusionMatrix(as.factor(Y.pred),
mode = "everything",
positive = "1")
for1 <- confusionMatrix(as.factor(predict.Social),
mode = "everything",
positive = "1")
TP = matriz[1,1]
FP = matriz[2,1]
FN = matriz[1,2]
TN = matriz[2,2]
#Accuracy.
# A = (TP+TN)/(TP+TN+FP+FN)
A = (TP+TN)/(TP+TN+FP+FN)
A
#Precisión.
# P = (TP)/(TP+FP)
P = (TP)/(TP+FP)
P
#Recall
# R = (TP)/(TP+FN)
R = (TP)/(TP+FN)
R
#F1 Score.
# F1 = (2 * P * R)/(P+R)
F1 = (2 * P * R)/(P+R)
F1
matriz.rF<- table(df.Social.Train$Purchased, predict.Social)
FP = matrizrF[2,1]
#Evaluación del modelo randomForest.
#Obteniendo los coeficientes.
TP = matrizrF[1,1]
TP = matriz.rF[1,1]
FP = matriz.rF[2,1]
FN = matriz.rF[1,2]
TN = matriz.rF[2,2]
plot.rpart.model <- rpart.plot(mdl.rpart)
predict.Social.rpart <- predict(mdl.rpart, type = "response",
newdata = df.Social.Train)
predict.Social <- predict(mdl.rpart, type = "response",
newdata = df.Social.Train)
predict.Social.rpart <- predict(mdl.rpart, type = "response",
newdata = df.Social.Train)
predict.Social <- predict(mdl.randomForest, type = "response",
newdata = df.Social.Train)
predict.Social.rpart <- predict(mdl.rpart, type = "prob",
newdata = df.Social.Train)
predict.Social.rpart
predict.Social <- predict(mdl.randomForest, type = "response",
newdata = df.Social.Train)
predict.Social.rpart <- predict(mdl.rpart, type = "response",
newdata = df.Social.Train)
predict.Social.rpart <- predict(mdl.rpart, type = "prob",
newdata = df.Social.Train)
Y.pred <- ifelse(predict.Social.rpart >= 0.5, 1, 0)
matriz.rpart <- table(df.Social.Train$Purchased, Y.pred)
